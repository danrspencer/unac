

class EventHandler<TArgs extends Object> {

  private _listeners: {callback: (args: TArgs) => void; context: any}[];

  constructor() {
    this._listeners = [];
  }

  public add(listener: (args: TArgs) => void, context): void {
    this._listeners.push({callback: listener, context: context});
  }

  public remove (listener: (args: TArgs) => void): void {
    for (var i = 0, l = this._listeners.length; i < l; l++) {
      if (this._listeners[i].callback == listener) {
        this._listeners.splice(i, 1);
        break;
      }
    }
  }

  public removeAll(): void {
    this._listeners = [];
  }

  public trigger(eventArgs: TArgs): void {
    var context = {};
    var listeners = this._listeners.slice(0);

    for(var i = 0, l = listeners.length; i < l; i++) {
      listeners[i].callback.apply(listeners[i].context, arguments);
    }
  }
}

export = EventHandler;

